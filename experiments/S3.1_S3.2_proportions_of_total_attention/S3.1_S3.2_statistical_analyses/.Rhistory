facet_wrap(~ Country, scales = "free_y") +
ggtitle("Actual and Forecasted P2 Demand by Country") +
xlab("Period Number") +
ylab("P2 Demand") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Combine the actual and forecasted data for the CSV
combined_data <- bind_rows(
select(data_filtered, `Period.number`, Country, `P2.Demand`),
select(results, `Period.number`, Country, `P2.Demand`)
)
# Append the forecasted results to the existing CSV file
write.table(combined_data, file = "/Users/shaunho/Documents/School/Mini 1/Business Fundamentals/Demand Forecast/Demand_P2_Forecast.csv", sep = ",",
row.names = FALSE, col.names = TRUE, quote = FALSE)
knitr::opts_chunk$set(echo = TRUE)
\( SE(\bar{x}) = \ldots \)
SE(\bar{x})
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
# Calculate Standard Error
SE = std_dev / sqrt(n)
# Z-values
Z_90 = 1.645  # For 90% confidence interval
Z_99 = 2.576  # For 99% confidence interval
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
# Calculate Standard Error
SE = std_dev / sqrt(n)
# Z-values
Z_90 = qnorm(0.95)  # For 90% confidence interval
Z_99 = qnorm(0.995)  # For 99% confidence interval
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
# Calculate Standard Error
SE = std_dev / sqrt(n)
SE
# Z-values
Z_90 = qnorm(0.95)  # For 90% confidence interval
Z_99 = qnorm(0.995)  # For 99% confidence interval
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
# Calculate Standard Error
SE = std_dev / sqrt(n)
SE
# Z-values
Z_90 = qnorm(0.95)  # For 90% confidence interval
Z_99 = qnorm(0.995)  # For 99% confidence interval
Z_95 = qnorm(0.975)
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
LCL = sample_mean - Z_95 * SE
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
sample_mean = 2.90
# Calculate Standard Error
SE = std_dev / sqrt(n)
SE
# Z-values
Z_90 = qnorm(0.95)  # For 90% confidence interval
Z_99 = qnorm(0.995)  # For 99% confidence interval
Z_95 = qnorm(0.975)
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
LCL = sample_mean - Z_95 * SE
UCL = sample_mean + Z_95 * SE
# Display results in the format [(LCL), (UCL)]
cat("95% confidence interval for the population mean: [(", LCL, "), (", UCL, ")]\n")
# Given data
std_dev = 0.45  # Standard deviation
n = 25  # Sample size
sample_mean = 2.90
# Calculate Standard Error
SE = std_dev / sqrt(n)
SE
# Z-values
Z_90 = qnorm(0.95)  # For 90% confidence interval
Z_99 = qnorm(0.995)  # For 99% confidence interval
Z_95 = qnorm(0.975)
# Calculate Margin of Error
MOE_90 = Z_90 * SE
MOE_99 = Z_99 * SE
# Display results
cat("Margin of Error for 90% confidence interval:", MOE_90, "\n")
cat("Margin of Error for 99% confidence interval:", MOE_99, "\n")
LCL = sample_mean - Z_95 * SE
UCL = sample_mean + Z_95 * SE
# Display results in the format [(LCL), (UCL)]
cat("95% confidence interval for the population mean: [(", LCL, "), (", UCL, ")]\n")
# Given confidence interval
LCL_given = 2.81
UCL_given = 2.99
# Calculate Margin of Error (MOE)
MOE = UCL_given - sample_mean  # or sample_mean - LCL, they should be the same
# Calculate Z-value
Z_value = MOE / SE
# Find the quantile associated with this Z-value
quantile_value = pnorm(Z_value)
# Calculate the confidence level
# 2 * (quantile_value - 0.5) gives us the percentage in the middle
confidence_level = 2 * (quantile_value - 0.5) + 1  # Convert to proportion from percentage
# Display results
cat("Confidence level associated with this interval:", confidence_level * 100, "%\n")
This code will output the confidence level associated with the given confidence interval extending from 2.81 to 2.99.
# Given confidence interval
LCL_given = 2.81
UCL_given = 2.99
# Calculate Margin of Error (MOE)
MOE = UCL_given - sample_mean  # or sample_mean - LCL, they should be the same
# Calculate Z-value
Z_value = MOE / SE
# Find the quantile associated with this Z-value
quantile_value = pnorm(Z_value)
# Calculate the confidence level
# 2 * (quantile_value - 0.5) gives us the percentage in the middle
confidence_level = 2 * (quantile_value - 0.5) + 1  # Convert to proportion from percentage
# Display results
cat("Confidence level associated with this interval:", confidence_level * 100, "%\n")
quantile_value = pnorm(Z_value)
quantile_value = pnorm(Z_value)
quantile_value
LCL_given = 2.81
UCL_given = 2.99
# Calculate Margin of Error (MOE)
MOE = UCL_given - sample_mean  # or sample_mean - LCL, they should be the same
# Calculate Z-value
Z_value = MOE / SE
# Find the quantile associated with this Z-value
quantile_value = pnorm(Z_value)
quantile_value
pnorm(1)
# Given data
Z_90 = 1.645  # Z-value for 90% confidence level
p = 0.5  # largest value of p(1 - p) is at p = 0.5
MOE = 0.04  # desired Margin of Error
# Calculate required sample size
required_sample_size = (Z_90 * sqrt(p * (1 - p)) / MOE)^2
# Since sample size has to be an integer, we'll round up to the nearest whole number
required_sample_size = ceiling(required_sample_size)
# Display result
cat("Required sample size for a 90% confidence interval with MOE of 0.04:", required_sample_size, "\n")
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
# Compute sample mean
sample_mean <- mean(data$`Cost of capital in US$`)
# Compute sample variance
sample_var <- var(data$`Cost of capital in US$`)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
data$`Cost of capital in US$` <- as.numeric(data$`Cost of capital in US$`, na.rm = TRUE)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
data$`Cost of capital in US$` <- as.numeric(data$`Cost of capital in US$`, na.rm = TRUE)
str(data)
# Read data from CSV
data <- read.csv("/Users/shaunho/Documents/School/Mini 1/46880/Week 5/Problem Set 5/MSBAProblemSet5.csv")
sample_mean <- mean(data$Cost.of.capital.in.US.)
sample_var <- var(data$Cost.of.capital.in.US.)
sample_std_dev <- sd(data$Cost.of.capital.in.US.)
cat("Sample mean:", sample_mean, "\n")
cat("Sample variance:", sample_var, "\n")
cat("Sample standard deviation:", sample_std_dev, "\n")
n <- nrow(data)
df <- n - 1
t_95 <- qt(0.975, df)
MOE <- t_95 * (sample_std_dev / sqrt(n))
cat("Margin of Error for 95% confidence interval:", MOE, "\n")
pop_mean <- 0.073  # 7.30% as a decimal
t_statistic <- (sample_mean - pop_mean) / (sample_std_dev / sqrt(n))
t_critical_lower <- qt(0.025, df)
t_critical_upper <- qt(0.975, df)
if (t_statistic < t_critical_lower || t_statistic > t_critical_upper) {
cat("Reject the null hypothesis.\n")
} else {
cat("Fail to reject the null hypothesis.\n")
}
cat("Null Hypothesis: The average cost of capital is 7.30%\n")
cat("Test Statistic:", t_statistic, "\n")
cat("Critical Values: [", t_critical_lower, ",", t_critical_upper, "]\n")
# (c) T-Test to Test the Hypothesis
pop_mean <- 0.073  # 7.30% as a decimal
alpha <- 0.05  # Significance level
# Calculate the test statistic
t_statistic <- (sample_mean - pop_mean) / (sample_std_dev / sqrt(n))
# Calculate the p-value
p_value <- 2 * (1 - pt(abs(t_statistic), df))
# Critical t-value
t_critical <- qt(1 - alpha / 2, df)
# Decision rule
if (p_value < alpha) {
decision <- "Reject the null hypothesis."
} else {
decision <- "Fail to reject the null hypothesis."
}
# Output the results
cat("Null Hypothesis: The average cost of capital is 7.30%\n")
cat("Test Statistic:", t_statistic, "\n")
cat("P-value:", p_value, "\n")
cat("Critical t-value:", t_critical, "\n")
cat("Decision:", decision, "\n")
# (c) T-Test to Test the Hypothesis
pop_mean <- 0.073  # 7.30% as a decimal
alpha <- 0.01  # Significance level
# Calculate the test statistic
t_statistic <- (sample_mean - pop_mean) / (sample_std_dev / sqrt(n))
# Calculate the p-value
p_value <- 2 * (1 - pt(abs(t_statistic), df))
# Critical t-value
t_critical <- qt(1 - alpha / 2, df)
# Decision rule
if (p_value < alpha) {
decision <- "Reject the null hypothesis."
} else {
decision <- "Fail to reject the null hypothesis."
}
# Output the results
cat("Null Hypothesis: The average cost of capital is 7.30%\n")
cat("Test Statistic:", t_statistic, "\n")
cat("P-value:", p_value, "\n")
cat("Critical t-value:", t_critical, "\n")
cat("Decision:", decision, "\n")
pop_mean <- 0.073  # 7.30% as a decimal
alpha <- 0.01  # Significance level
# Calculate the test statistic
t_statistic <- (sample_mean - pop_mean) / (sample_std_dev / sqrt(n))
# Calculate the p-value
p_value <- 2 * (1 - pt(abs(t_statistic), df))
# Critical t-value
t_critical <- qt(1 - alpha / 2, df)
# Decision rule
if (p_value < alpha) {
decision <- "Reject the null hypothesis."
} else {
decision <- "Fail to reject the null hypothesis."
}
# Output the results
cat("Null Hypothesis: The average cost of capital is 7.30%\n")
cat("Test Statistic:", t_statistic, "\n")
cat("P-value:", p_value, "\n")
cat("Critical t-value:", t_critical, "\n")
cat("Decision:", decision, "\n")
# (a) Calculate the Standard Error of the Mean
pop_sd <- 0.45  # Population standard deviation
n <- 25  # Sample size
SE <- pop_sd / sqrt(n)
cat("Standard Error of the mean:", SE, "\n")
# (b) Calculate Margin of Error for 90% and 99% Confidence Intervals
Z_90 <- qnorm(0.95)  # Z-value for 90% CI
Z_99 <- qnorm(0.995)  # Z-value for 99% CI
ME_90 <- Z_90 * SE  # Margin of error for 90% CI
ME_99 <- Z_99 * SE  # Margin of error for 99% CI
cat("Margin of Error for 90% CI:", ME_90, "\n")
cat("Margin of Error for 99% CI:", ME_99, "\n")
# (c) Find a 95% Confidence Interval for the Population Mean
sample_mean <- 2.9  # Sample mean
Z_95 <- qnorm(0.975)  # Z-value for 95% CI
LCL_95 <- sample_mean - Z_95 * SE  # Lower confidence limit
UCL_95 <- sample_mean + Z_95 * SE  # Upper confidence limit
cat("95% Confidence Interval for population mean: [", LCL_95, ", ", UCL_95, "]\n")
# (d) Find the Confidence Level Associated with Given Interval
ME_given <- 0.09  # Given margin of error
Z_given <- ME_given / SE  # Associated Z-value
conf_level_given <- 2 * (1 - pnorm(abs(Z_given)))  # Associated confidence level
cat("Confidence level associated with this interval:", (1 - conf_level_given) * 100, "%\n")
# (e) Comment on Larger Sample Size and 99% CI
cat("With a larger sample size, the 99% confidence interval for the population mean would be narrower.\n")
# install.packages(c("ISLR2", "car", "leaps", "msm"))
library(ISLR2)
library(car)
library(leaps)
library(msm)
head(Boston)
# Fit a multiple linear regression.
lm_fit <- lm(medv ~ lstat + age, data = Boston)
summary(lm_fit)
# Let's fit a model with a qualitative predictor.
# See also ISL chapter 3.6.6 for more on qualitative predictors.
# Here, we add a binary predictor that measures whether the pupil to teacher
# ratio in the area where the house is located exceeds 18%.
lm_fit_with_binary_pred <- lm(
medv ~ lstat + age + I(ptratio >= 18),
data = Boston
)
summary(lm_fit_with_binary_pred)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# ETL
data <- read.csv("proportions_data.csv")
setwd("~/Projects/JURIX/poster/experiments/proportions/analysis/statistical_analyses")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# ETL
data <- read.csv("proportions_data.csv")
lookup <- c(
"facet-1" = "Definiendum",
"facet-2" = "Role",
"facet-3" = "Permissible Action",
"facet-4" = "Prohibitory Action",
"facet-5" = "Condition",
"facet-6" = "Evidence Object",
"thematic" = "Fact Elements"
)
data <- data %>%
mutate(experiment_id = ifelse(experiment_id %in% names(lookup), lookup[experiment_id], experiment_id))
colnames(data) <- gsub("\\.", "_", colnames(data))
# Summarize cumulative sum for each unique experiment_id and layer_depth
summary_data <- data %>%
group_by(experiment_id, layer_depth) %>%
summarize(
mean_saulbase_mistral = mean(saulbase_mistral),
mean_saulift_mistral = mean(saulift_mistral)
)
# Plot for each experiment_id
ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
ggsave(filename = "high_res_plot.png", plot = plt, width = 8, height = 6, dpi = 300)
# Plot for each experiment_id
plt <- ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
ggsave(filename = "high_res_plot.png", plot = plt, width = 8, height = 6, dpi = 300)
ggsave(filename = "high_res_plot.png", plot = plt, width = 8, height = 6, dpi = 300)
plt <- ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
plt + + theme_minimal()
plt <- ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
plt + theme_minimal()
ggsave(filename = "high_res_plot.png", plot = plt, width = 8, height = 6, dpi = 300)
# Plot for each experiment_id
plt <- ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
# Plot for each experiment_id
ggplot(summary_data, aes(x = layer_depth)) +
geom_line(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base")) +
geom_line(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct")) +
facet_wrap(~experiment_id, scales = "free", nrow = 2, ncol = 4) +
labs(
x = "Layer Depth",
y = "Mean Additional Attention to Legal Concepts\nvs Mistral 7B",
color = "Model"
) +
theme_minimal() +
scale_color_manual(values = c("SaulLM-7B-Base" = "blue", "SaulLM-7B-Instruct" = "red")) +
geom_hline(yintercept = 0, color = "black", linetype = "solid", size = .5) +
geom_smooth(aes(y = mean_saulbase_mistral, color = "SaulLM-7B-Base"), se = FALSE, linetype = "dashed", size = .5) +
geom_smooth(aes(y = mean_saulift_mistral, color = "SaulLM-7B-Instruct"), se = FALSE, linetype = "dashed", size = .5) +
theme(
legend.position = c(0.98, 0.2),
legend.box.background = element_rect(color = "black"),
legend.justification = "right",
strip.text = element_text(size = 14)
)
